name: Build nginx with RTMP/HLS/HTTP-FLV

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NGINX_VER: 1.27.0
  RTMP_VER:  1.2.2
  HTTPFLV_VER: 1.2.12
  OPENSSL_VER: 3.3.1
  PCRE2_VER: 10.44
  ZLIB_VER: 1.3.1

jobs:
  build:
    runs-on: windows-2022

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          git
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-pcre2
          mingw-w64-x86_64-zlib
          nasm
          make

    - name: Download sources (PowerShell)
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path objs/lib
        Set-Location objs/lib

        Invoke-WebRequest `
          -Uri https://nginx.org/download/nginx-${{ env.NGINX_VER }}.tar.gz `
          -OutFile nginx.tgz
        tar -xzf nginx.tgz
        Remove-Item nginx.tgz

        Invoke-WebRequest `
          -Uri https://github.com/arut/nginx-rtmp-module/archive/refs/tags/v${{ env.RTMP_VER }}.tar.gz `
          -OutFile rtmp.tgz
        tar -xzf rtmp.tgz
        Move-Item nginx-rtmp-module-* nginx-rtmp-module
        Remove-Item rtmp.tgz

        Invoke-WebRequest `
          -Uri https://github.com/winshining/nginx-http-flv-module/archive/refs/tags/v${{ env.HTTPFLV_VER }}.tar.gz `
          -OutFile flv.tgz
        tar -xzf flv.tgz
        Move-Item nginx-http-flv-module-* nginx-http-flv-module
        Remove-Item flv.tgz

        Invoke-WebRequest `
          -Uri https://zlib.net/fossils/zlib-${{ env.ZLIB_VER }}.tar.gz `
          -OutFile zlib.tgz
        tar -xzf zlib.tgz

        Invoke-WebRequest `
          -Uri https://github.com/openssl/openssl/releases/download/openssl-${{ env.OPENSSL_VER }}/openssl-${{ env.OPENSSL_VER }}.tar.gz `
          -OutFile openssl.tgz
        tar -xzf openssl.tgz

    - name: Install PCRE2 via vcpkg
      shell: pwsh
      run: |
        vcpkg install pcre2:x64-windows-static

    - name: Configure
      shell: msys2 {0}
      run: |
        cd "$(cygpath -u '${{ github.workspace }}')/objs/lib/nginx-${{ env.NGINX_VER }}"
        ./configure \
          --with-cc=cl \
          --with-cc-opt="-DFD_SETSIZE=1024 -W3 -WX-" \
          --with-debug \
          --prefix="" \
          --conf-path=conf/nginx.conf \
          --pid-path=logs/nginx.pid \
          --http-log-path=logs/access.log \
          --error-log-path=logs/error.log \
          --sbin-path=nginx.exe \
          --http-client-body-temp-path=temp/client_body_temp \
          --http-proxy-temp-path=temp/proxy_temp \
          --http-fastcgi-temp-path=temp/fastcgi_temp \
          --http-scgi-temp-path=temp/scgi_temp \
          --http-uwsgi-temp-path=temp/uwsgi_temp \
          --with-openssl=../openssl-${{ env.OPENSSL_VER }} \
          --with-openssl-opt=no-asm \
          --with-pcre=../pcre2 \
          --with-pcre-opt="-DPCRE2_STATIC -DPCRE2_CODE_UNIT_WIDTH=8 -I$(vcpkg fetch pcre2)/include" \
          --with-ld-opt="/LIBPATH:$(vcpkg fetch pcre2)/lib pcre2-8-static.lib"
          --with-zlib=../zlib-${{ env.ZLIB_VER }} \
          --with-http_ssl_module \
          --add-module=../nginx-rtmp-module \
          --add-module=../nginx-http-flv-module

    - name: Build
      shell: pwsh
      run: |
        Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" -Arch amd64

        Set-Location objs/lib/nginx-${{ env.NGINX_VER }}

        nmake -f objs/Makefile

    - name: Collect artifact
      run: |
        mkdir artifact
        cp objs/lib/nginx-${{ env.NGINX_VER }}/objs/nginx.exe artifact/
        cp -r objs/lib/nginx-${{ env.NGINX_VER }}/conf artifact/
        cp -r objs/lib/nginx-${{ env.NGINX_VER }}/html artifact/

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: nginx-rtmp-httpflv-win64
        path: artifact

    - name: Package final zip
      run: |
        cd artifact
        7z a ../nginx-rtmp-httpflv-win64.zip .

    - name: Create/Update GitHub Release
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main'
      with:
        tag_name: nightly
        name: "Nightly build (${{ github.run_number }})"
        body: |
          ## üöÄ Ëá™Âä®ÊûÑÂª∫ Windows Áâà nginx
          - **Nginx** ${{ env.NGINX_VER }}
          - **nginx-rtmp-module** ${{ env.RTMP_VER }}
          - **nginx-http-flv-module** ${{ env.HTTPFLV_VER }}
          - **OpenSSL** ${{ env.OPENSSL_VER }}
          - **PCRE2** ${{ env.PCRE2_VER }}
          - **zlib** ${{ env.ZLIB_VER }}

          ### ‚úÖ ÂäüËÉΩ
          - RTMP Êé®ÊµÅ / Êí≠Êîæ
          - HTTP-FLV Êí≠Êîæ
          - HLS ÂàáÁâá
          - ÈùôÊÄÅÊñá‰ª∂ / ÂèçÂêë‰ª£ÁêÜ

          ### üì¶ ‰ΩøÁî®
          1. ‰∏ãËΩΩ `nginx-rtmp-httpflv-win64.zip`
          2. Ëß£ÂéãÂêéÁõ¥Êé•ÂèåÂáª `nginx.exe`
          3. Êé®ÊµÅÔºö`ffmpeg -re -i demo.flv -c copy -f flv rtmp://127.0.0.1/live/stream`
          4. Êí≠ÊîæÔºö
             - RTMPÔºö`rtmp://127.0.0.1/live/stream`
             - HTTP-FLVÔºö`http://127.0.0.1/live?app=live&stream=stream`
             - HLSÔºö`http://127.0.0.1/hls/stream.m3u8`

          ËØ¶ÁªÜÈÖçÁΩÆËßÅÂåÖÂÜÖ `conf/nginx.conf`„ÄÇ
        files: nginx-rtmp-httpflv-win64.zip
        prerelease: true                    # ËÆæÁΩÆ‰∏∫È¢ÑÂèëÂ∏ÉÔºåÊ≠£ÂºèÂèëÁâàÂèØÊîπ‰∏∫ false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}