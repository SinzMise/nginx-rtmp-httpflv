name: Build nginx with RTMP/HLS/HTTP-FLV

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NGINX_VER: 1.27.0
  RTMP_VER:  1.2.2
  HTTPFLV_VER: 1.2.12
  OPENSSL_VER: 3.3.1
  PCRE2_VER: 10.44
  ZLIB_VER: 1.3.1

jobs:
  build:
    runs-on: windows-2022

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          git
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-pcre2
          mingw-w64-x86_64-zlib
          nasm
          make

    - name: Download sources
      run: |
        mkdir -p objs/lib
        cd objs/lib

        curl -L https://nginx.org/download/nginx-${{ env.NGINX_VER }}.tar.gz | tar xz
        curl -L https://github.com/arut/nginx-rtmp-module/archive/v${{ env.RTMP_VER }}.tar.gz | tar xz -C nginx-rtmp-module --strip-components=1
        curl -L https://github.com/winshining/nginx-http-flv-module/archive/${{ env.HTTPFLV_VER }}.tar.gz | tar xz -C nginx-http-flv-module --strip-components=1

    - name: Configure
      run: |
        cd objs/lib/nginx-${{ env.NGINX_VER }}
        auto/configure \
          --with-cc=cl \
          --with-debug \
          --prefix= \
          --conf-path=conf/nginx.conf \
          --pid-path=logs/nginx.pid \
          --http-log-path=logs/access.log \
          --error-log-path=logs/error.log \
          --sbin-path=nginx.exe \
          --http-client-body-temp-path=temp/client_body_temp \
          --http-proxy-temp-path=temp/proxy_temp \
          --http-fastcgi-temp-path=temp/fastcgi_temp \
          --http-scgi-temp-path=temp/scgi_temp \
          --http-uwsgi-temp-path=temp/uwsgi_temp \
          --with-cc-opt="-DFD_SETSIZE=1024" \
          --with-openssl=../openssl-${{ env.OPENSSL_VER }} \
          --with-openssl-opt=no-asm \
          --with-pcre=../pcre2-${{ env.PCRE2_VER }} \
          --with-zlib=../zlib-${{ env.ZLIB_VER }} \
          --with-http_ssl_module \
          --add-module=../nginx-rtmp-module-${{ env.RTMP_VER }} \
          --add-module=../nginx-http-flv-module-${{ env.HTTPFLV_VER }}

    - name: Build
      run: |
        cd objs/lib/nginx-${{ env.NGINX_VER }}
        nmake -f objs/Makefile

    - name: Collect artifact
      run: |
        mkdir artifact
        cp objs/lib/nginx-${{ env.NGINX_VER }}/objs/nginx.exe artifact/
        cp -r objs/lib/nginx-${{ env.NGINX_VER }}/conf artifact/
        cp -r objs/lib/nginx-${{ env.NGINX_VER }}/html artifact/

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: nginx-rtmp-httpflv-win64
        path: artifact

    - name: Package final zip
      run: |
        cd artifact
        7z a ../nginx-rtmp-httpflv-win64.zip .

    - name: Create/Update GitHub Release
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main'   # 只有 main 分支才发版
      with:
        tag_name: nightly                   # 自动打 nightly 标签，可改用 ${{ github.ref_name }}
        name: "Nightly build (${{ github.run_number }})"
        body: |
          ## 🚀 自动构建 Windows 版 nginx
          - **Nginx** ${{ env.NGINX_VER }}
          - **nginx-rtmp-module** ${{ env.RTMP_VER }}
          - **nginx-http-flv-module** ${{ env.HTTPFLV_VER }}
          - **OpenSSL** ${{ env.OPENSSL_VER }}
          - **PCRE2** ${{ env.PCRE2_VER }}
          - **zlib** ${{ env.ZLIB_VER }}

          ### ✅ 功能
          - RTMP 推流 / 播放
          - HTTP-FLV 播放
          - HLS 切片
          - 静态文件 / 反向代理

          ### 📦 使用
          1. 下载 `nginx-rtmp-httpflv-win64.zip`
          2. 解压后直接双击 `nginx.exe`
          3. 推流：`ffmpeg -re -i demo.flv -c copy -f flv rtmp://127.0.0.1/live/stream`
          4. 播放：
             - RTMP：`rtmp://127.0.0.1/live/stream`
             - HTTP-FLV：`http://127.0.0.1/live?app=live&stream=stream`
             - HLS：`http://127.0.0.1/hls/stream.m3u8`

          详细配置见包内 `conf/nginx.conf`。
        files: nginx-rtmp-httpflv-win64.zip
        prerelease: true                    # 设置为预发布，正式发版可改为 false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}